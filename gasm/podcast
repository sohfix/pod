#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys


def run_feeds(argv):
    try:
        from podcastpkg.feeds import main as feeds_main
    except Exception as e:
        print("Failed to import podcastpkg.feeds:", e, file=sys.stderr)
        sys.exit(1)
    return feeds_main(argv)


def run_clips(argv):
    try:
        from podcastpkg.clips import main as clips_main
    except Exception as e:
        print("Failed to import podcastpkg.clips:", e, file=sys.stderr)
        sys.exit(1)
    return clips_main(argv)


def print_help():
    print(
        """podcast â€” unified CLI

USAGE
  podcast set
  podcast feed add <rss-url>
  podcast feed list
  podcast feed search <query>
  podcast feed refresh
  podcast download [opts]
  podcast clip [opts]
  podcast help [feeds|download|clip]
"""
    )


def main(argv=None):
    argv = sys.argv[1:] if argv is None else argv

    if not argv or argv[0] in {"-h", "--help", "help"}:
        if len(argv) == 2 and argv[0] in {"help", "--help", "-h"}:
            topic = argv[1]
            if topic in {"feeds", "feed", "download", "dl"}:
                return run_feeds(["--help"])
            if topic in {"clip", "clips", "audio"}:
                return run_clips(["--help"])
        print_help()
        return 0

    cmd = argv[0]
    rest = argv[1:]

    if cmd == "set":
        return run_feeds(["init"] + rest)

    if cmd in {"feed", "feeds"}:
        return run_feeds(rest)

    if cmd in {"download", "dl", "pull", "sync"}:
        return run_feeds([cmd] + rest)

    if cmd in {"clip", "clips"}:
        return run_clips(rest)

    feeds_verbs = {
        "init",
        "add",
        "list",
        "ls",
        "search",
        "show",
        "refresh",
        "download",
        "pull",
        "dl",
        "sync",
        "config",
        "summary",
        "summaries",
    }
    if cmd in feeds_verbs:
        return run_feeds([cmd] + rest)

    return run_clips(argv)


if __name__ == "__main__":
    try:
        raise SystemExit(main())
    except KeyboardInterrupt:
        print("Interrupted.", file=sys.stderr)
        raise SystemExit(130)
